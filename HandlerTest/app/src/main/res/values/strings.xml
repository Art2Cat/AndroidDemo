<resources>
    <string name="app_name">"AsyncTask and Handler Test"</string>

    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="heading_method1">Handler实现图片循环播放</string>
    <string name="heading_method1_content">这里使用的是Handler.postDelayed()方法实现</string>
    <string name="heading_method1_content1">1.首先要新建一个handler对象</string>
    <string name="heading_method1_content2">2.然后新建一个类继承Runnable，在run()方法中操作更新UI</string>
    <string name="heading_method1_content3">3.再新建自定义Runnable类的对象</string>
    <string name="heading_method1_content4">4.最后调用handler.postDelayed()方法，
        传入自定义Runnable类对象和需要延长的时间，以实现UI延时更新或循环</string>

    <string name="heading_method2">Handler发送消息两种方法</string>
    <string name="heading_method3">Handler实现主线程与子线程交互</string>
    <string name="heading_method4">Handler截获消息</string>
    <string name="heading_method4_content">//向Handler中传入一个参数为CallBack的对象，
        然后重载一个返回值为boolean的handleMessage（）的方法\n
        //如果返回值为false，将先执行这个方法，再执行Handler中void的handleMessage（）方法\n
        //如果返回值为true,只执行这个方法</string>
    <string name="heading_method5">AsyncTask模拟加载进度条</string>

    <string name="summary_header">总结：</string>

    <string name="summary_content">* Handler负责消息的发送，Looper负责接收Handler发送的消息，
        并直接把消息回传给Handler自己，MessageQueue是一个存储消息的容器。\n
        * Message:消息，其中包含了消息ID，消息处理对象以及处理的数据，由MessageQueue同意列队，终由Handler处理。\n
        * Handler：处理者，负责Message的接受和处理，使用Handle时，需要实现handleMessage(Message msg)
        方法对特定的Message进行处理，例如对UI更新等。\n
        * MessageQueue：消息队列，用来存放Handle发送过来的消息，并按照FIFO规则执行，当然，
        存放Message并非实际意义的保存，而是将Message以链表的方法串联起来的，等待Looper的抽取。\n
        * Looper：消息泵。不断地从MessageQueue中抽取Message执行，因此，一个MessageQueue需要一个Looper。\n
        * Thread：线程，负责调整整个消息循环，及消息循环的执行场所。\n</string>
    <string name="summary_content1">注意不能在主线程的Handler中进行耗时操作，这会造成主线程的堵塞，应该将耗时操作放在子线程完成。</string>
</resources>
